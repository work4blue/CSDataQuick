/*!

\page installation.html
\title Installation

\chapter Binary pacakges

\section1 Packages bundled with Qt Creator
To facilitate the usage, packages bundled with Qt Creator are available at https://github.com/xiaoqiangwang/CSDataQuick/releases. The packages are self-contained, including Qt libraries, EPICS base libraries.

\section1 Anaconda Packages
Anaconda is a Python distribution. It provides a reproducible way to deploy binary packages, not limited to Python.
This module provides packages for linux-64, win-64 and osx-64 platform.
\code
    $ conda install -c paulscherrerinstitute csdataquick
\endcode

On Windows, \e qt package needs to be installed manually.
\code
    > conda install qt
\endcode
If the module is not to be used by Python applications, the EPICS dll libraries have to be in path
\code
    > set PATH=%PATH%;C:\Miniconda3\epics\windows-x64
\endcode

On Linux, the default \e qt package does not have OpenGL builtin. The version from \e conda-forge has to be used instead.
\code
    $ conda install -c conda-forge qt
\endcode

\chapter Dependencies

\list
\li Qt 5.6 or higher
\li EPICS base 3.14.12 or higher
\li Git
\li (optional) cmake 2.8.10 or higher
\endlist

On RHEL/Centos/SL 6.x, install qt5 from EPEL repository,
\code
    # yum install yum-conf-epel
    # yum --enablerepo=epel install qt5-qtdeclarative-devel
    # yum --enablerepo=epel install qt5-qtquickcontrols
\endcode

In the following instructions, EPICS base is assumed to be
in \c C:\epics\base-3.14.12 on Windows and \c /usr/local/epics/base on macOS or Linux.
And the \c EPICS_BASE environment variable is pointing to it.
The \c EPICS_HOST_ARCH environment variable is assumed to be 
\table
\header
    \li OS
    \li EPICS_HOST_ARCH
\row
    \li Windows
    \li windows-x64
\row
    \li macOS
    \li darwin-x86
\row
    \li Linux
    \li linux-x86_64
\endtable

\e {Note: If it is going to be used in Qt Quick Designer, different setup might be required on \l {Use in Qt Quick Designer} {Windows}. }

\chapter macOS or Linux

\list

\li Get the source from github
\code
    $ git clone https://github.com/xiaoqiangwang/CSDataQuick
\endcode

\li Create an out-of-source build directory
\code
    $ mkdir CSDataQuick-build
    $ cd CSDataQuick-build
\endcode

\li Either use qmake, it could be named \c qmake-qt5 on many Linux distros.
\code
    $ qmake ../CSDataQuick
\endcode
or use cmake
\code
    $ cmake ../CSDataQuick
\endcode
\li Start the build process
\code
    $ make
\endcode

\endlist

\chapter Windows

\list

\li Get the source from github
\code
    > git clone https://github.com/xiaoqiangwang/CSDataQuick
\endcode

\li Create an out-of-source build directory
\code
    > mkdir CSDataQuick-build
    > cd CSDataQuick-build
\endcode

\li Add Visual C++, Qt SDK, EPICS base to the \c PATH
\code
    > set PATH=%PATH%;C:\Qt\5.7\msvc2015_64\bin;C:\epics\base-3.14.12\bin\windows-x64
    > call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64
\endcode

\li Either use qmake
\code
    > qmake ..\CSDataQuick
\endcode
or use cmake
\code
    > "C:\Program Files\CMake\bin\cmake" -DCMAKE_BUILD_TYPE=Release -G "NMake Makefiles" ..\CSDataQuick
\endcode
\li Start the build process
\code
    > nmake
\endcode

\endlist


*/
