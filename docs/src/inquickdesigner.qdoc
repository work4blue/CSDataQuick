/*!

\page use-in-quickdesigner.html
\title Use in Qt Quick Designer

\chapter Setup Qt Quick Designer

Unlike the Qt UI Designer, Qt Quick Designer is deeply integrated in Qt Creator.
This has one advantage that one can switch to edit mode to fine tune the components.

The following setup is not necessary for the bundled binary package from http://epics.web.psi.ch/software/CSDataQuick

\section1 macOS and Linux

The CSDataQuick module must be in the import path before launching Qt Creator.
\code
    $ export QML_IMPORT_PATH=CSDataQuick-qmake/qml
\endcode

And after you have created your own collection of UI components, you could add them to
this path as well. Imagine in a collaboraton environment, everyone could create device
components and install them into a central location, e.g. /net/shared/qml/.
To reuse these components, it is sufficient to add this central location to the path.
\code
    $ export QML_IMPORT_PATH=$QML_IMPORT_PATH:/net/shared/qml
\endcode

The designer works by creating invisible background renders (qmlpuppet). For modules
with C++ plugins, like CSDataQuick, the qmlpuppet must be rebuilt with 
the same Qt version as the plugin. To enable this, go to menu \e Tools -> \e Options, 
select \e{Qt Quick} from the left list, then select  \e{Qt Quick Designer} tab, 
in the \e{QML Enumlation Layer} group, select \e{Use QML emulation layer that is built bythe selected Qt}.

\image config-qmldesigner.png "Configure Quick Designer"

\section1 Windows

On Windows the situation is a lot more subtle. The safest approach is to build against the same Qt version as the Qt Creator.
For example, Qt Creator 4.4 uses Qt 5.9.1 msvc2015 32bit.

In addition, add the \e bin to PATH. Suppose the build path is \c C:\CSDataQuick-qmake
\code
    > set PATH=C:\CSDataQuick-qmake\bin;C:\epics\base-3.14.12\bin\win32-x86;%PATH%
    > set QML_IMPORT_PATH=C:\CSDataQuick-qmake\qml
    > C:\Qt\Tools\QtCreator\bin\qtcreator.exe
\endcode

The long answer is that, Qt Creator needs to know which Qt version to be used to create \e qml2puppet.
One can create an empty project, using the same Qt version used to build CSDataQuick. And then open/create qml displays from there.

\chapter Using the designer

Start with an empty template file, \e mydevice.qml
\code
    import QtQuick 2.5
    import CSDataQuick.Components 1.0

    BaseWindow {
    }
\endcode

Open it with qtcreator,
\code
    $ qtcreator mydevice.qml
\endcode

New qml files created from Qt Creator have \e Item as the root item. Change manually the root item to \e BaseWindow.

The following video shows show to switch between edit and design modes.
\raw HTML
<iframe width="560" height="315" src="https://www.youtube.com/embed/3RrCNwAp318" frameborder="0" allowfullscreen></iframe>
\endraw

\chapter What is not working

\list
\li The Display, Command, StripChar and CartesianPlot editor: if the model is given of \c ListModel form, it cannot be edited in designer.
\code
    model: ListModel {
        ListElement {
            label: 'list'
            command: 'ls'
        }
    }
\endcode
The workaround is to use JSON object array form.
\code
    model: [
        {
            'label': 'list',
            'command': 'ls'
        }
    ]
\endcode
\endlist

*/
